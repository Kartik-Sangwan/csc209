Script started on 2020-02-14 09:55:36-0500
]0;sangwan2@wolf:/h/u14/c8/00/sangwan2/Desktop/csc209/sangwan2/lab6wolf:~/Desktop/csc209/sangwan2/lab6$ 
]0;sangwan2@wolf:/h/u14/c8/00/sangwan2/Desktop/csc209/sangwan2/lab6wolf:~/Desktop/csc209/sangwan2/lab6$ gdb example_[K[K[K[K[K[K[K[Koverflow
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break main
Breakpoint 1 at 0x742: file overflow.c, line 6.
(gdb) list 35
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33          printf("\n");
34      
35      
36          for (i = 0; i < OVERFLOW; i++) {
37              a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) break 36
Breakpoint 2 at 0x959: file overflow.c, line 36.
(gdb) next[K[K[K[Krun
Starting program: /h/u14/c8/00/sangwan2/Desktop/csc209/sangwan2/lab6/overflow 

Breakpoint 1, main () at overflow.c:6
6       int main() {
(gdb) next
7           int index = 0;
(gdb) continue
Continuing.
Address of the variables:
7fffffffe910 -> &after[0]
7fffffffe914 -> &after[1]
7fffffffe918 -> &after[2]
7fffffffe91c -> &after[3]
7fffffffe900 -> &a[0]
7fffffffe904 -> &a[1]
7fffffffe908 -> &a[2]
7fffffffe90c -> &a[3]
7fffffffe8f0 -> &before[0]
7fffffffe8f4 -> &before[1]
7fffffffe8f8 -> &before[2]
7fffffffe8fc -> &before[3]
7fffffffe8ec -> &i
7fffffffe8e8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) display i
1: i = 0
(gdb) next
37              a[i] = i * 10;
1: i = 0
(gdb) next
38              printf("i = %d\n", i);
1: i = 0
(gdb) next
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: i = 0
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: i = 0
(gdb) next
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: i = 0
(gdb) next
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: i = 0
(gdb) next
37              a[i] = i * 10;
1: i = 1
(gdb) next
38              printf("i = %d\n", i);
1: i = 1
(gdb) next
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: i = 1
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: i = 1
(gdb) next
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: i = 1
(gdb) next
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: i = 1
(gdb) next
37              a[i] = i * 10;
1: i = 2
(gdb) next
38              printf("i = %d\n", i);
1: i = 2
(gdb) next
i = 2
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: i = 2
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: i = 2
(gdb) next
a = {0, 10, 20, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: i = 2
(gdb) next
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: i = 2
(gdb) next
37              a[i] = i * 10;
1: i = 3
(gdb) next
38              printf("i = %d\n", i);
1: i = 3
(gdb) next
i = 3
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: i = 3
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: i = 3
(gdb) next
a = {0, 10, 20, 30}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: i = 3
(gdb) next
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: i = 3
(gdb) next
37              a[i] = i * 10;
1: i = 4
(gdb) next
38              printf("i = %d\n", i);
1: i = 4
(gdb) next
i = 4
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: i = 4
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: i = 4
(gdb) next
a = {0, 10, 20, 30}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: i = 4
(gdb) next
after = {40, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: i = 4
(gdb) display %[K&a[]4][C
2: &a[4] = (int *) 0x7fffffffe910
(gdb) display &a[4]f[4]y[4][1P[4]t[4]e[4]t[4][1P[4]r[4][C[C[1P]0][C
3: &after[0] = (int *) 0x7fffffffe910
(gdb) exiit[K[K[K[K[Kquit
A debugging session is active.

        Inferior 1 [process 4201] will be killed.

Quit anyway? (y or n) y
]0;sangwan2@wolf:/h/u14/c8/00/sangwan2/Desktop/csc209/sangwan2/lab6wolf:~/Desktop/csc209/sangwan2/lab6$ exit
exit

Script done on 2020-02-14 09:57:46-0500
